name: Integration CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Job to build and lint the Next.js application
  build_and_lint:
    runs-on: ubuntu-latest
    env:
      # --- Vercel/Turborepo Remote Caching Environment Variables ---
      # These variables enable Turborepo to connect to Vercel's remote cache.
      # Ensure VERCEL_TOKEN, VERCEL_ORG_ID, VERCEL_PROJECT_ID are set as repository secrets in GitHub.
      TURBO_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      TURBO_API: https://api.vercel.com/v8/artifacts # Vercel Remote Cache API endpoint
      TURBO_TEAM: ${{ secrets.VERCEL_ORG_ID }} # Use Vercel Organization ID here
      # Optional: TURBO_REMOTE_ONLY: "true" # Forces Turborepo to only use the remote cache, useful for CI

      # --- Next.js Build-time Environment Variables (from your original list) ---
      # IMPORTANT: These should be set as secrets in your GitHub repository settings
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
      NEXT_PUBLIC_CLERK_SIGN_IN_URL: /sign-in
      NEXT_PUBLIC_CLERK_SIGN_UP_URL: /sign-up
      NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL: /onboarding
      NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL: /onboarding
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
      INNGEST_EVENT_KEY: ${{ secrets.INNGEST_EVENT_KEY }}
      INNGEST_SIGNING_KEY: ${{ secrets.INNGEST_SIGNING_KEY }}

      # --- CI/CD Specific Environment Variable ---
      CI: true # Enables stricter build checks in Next.js/React for CI environments

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x] # Test against multiple Node.js versions

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm' # Caches npm dependencies based on lock file

    - name: Install Dependencies
      run: npm ci # Use 'npm ci' for clean installs in CI environments

    - name: Install Turbo CLI (if not already in package.json scripts)
      # This step ensures 'turbo' command is available.
      # If 'turbo' is only used via 'npm run <script>' and is a devDependency,
      # this global install might not be strictly necessary, but adds robustness.
      run: npm install -g turbo

    - name: Run ESLint Check
      # Assuming you have a "lint" script in your package.json
      # This runs before build to catch issues early.
      run: npm run lint

    - name: Build Next.js Application with Remote Cache
      # This assumes your package.json 'build' script is "turbo build"
      run: npm run build

  # Job to run unit tests
  unit_tests:
    runs-on: ubuntu-latest
    # This job depends on 'build_and_lint' being successful to ensure tests run on a buildable codebase.
    needs: build_and_lint 
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm' # Caches npm dependencies for the test job

    - name: Install Dependencies
      run: npm ci # Use 'npm ci' for clean installs in CI environments

    - name: Run Unit Tests
      # This assumes your package.json 'test' script is "npx jest"
      run: npm run test

  # Optional: Deployment Job (example - you'd customize this)
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [build_and_lint, unit_tests] # Depends on both build and tests passing
  #   if: github.ref == 'refs/heads/main' # Only deploy from main branch
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Deploy to Vercel
  #       uses: amondnet/vercel-action@v25 # Or your preferred deployment action
  #       with:
  #         vercel-token: ${{ secrets.VERCEL_TOKEN }}
  #         vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
  #         vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
  #         # ... additional deployment specific configurations